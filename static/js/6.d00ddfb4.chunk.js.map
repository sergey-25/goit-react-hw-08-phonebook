{"version":3,"sources":["utils/YupValidationSchemes.js","pages/RegisterPage/RegisterPage.jsx"],"names":["addContactValidationSchema","Yup","shape","name","min","max","required","LogInValidationSchema","email","password","registerValidationSchema","RegisterPage","dispatch","useDispatch","nameInputId","nanoid","emailInputId","passwordInputId","initialValues","validationSchema","onSubmit","values","newUser","resetForm","signUp","autoComplete","htmlFor","type","id","placeholder","component","ValidationMessage"],"mappings":"gJAAA,mHAGMA,GAHN,OAGmCC,WAAaC,MAAM,CACpDC,KAAMF,WACHG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,eAIRC,EAAwBN,WAAaC,MAAM,CAC/CM,MAAOP,WAAaO,QAAQF,SAAS,YACrCG,SAAUR,WACPG,IAAI,EAAG,qDACPE,SAAS,cAGRI,EAA2BT,WAAaC,MAAM,CAClDC,KAAMF,WACHG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,YACZE,MAAOP,WAAaO,QAAQF,SAAS,YACrCG,SAAUR,WACPG,IAAI,EAAG,qDACPE,SAAS,e,iCC1Bd,oFAoFeK,UAnEf,WACE,IAAMC,EAAWC,cAEbC,EAAcC,YAAO,GACrBC,EAAeD,YAAO,GACtBE,EAAkBF,YAAO,GAM7B,OACE,cAAC,IAAD,CACEG,cAAe,CAAEf,KAAM,GAAIK,MAAO,GAAIC,SAAU,IAChDU,iBAAkBT,IAClBU,SAAU,SAACC,EAAD,GAA4B,IARXC,EAQNC,EAAgB,EAAhBA,UACXpB,EAA0BkB,EAA1BlB,KAAMK,EAAoBa,EAApBb,MAAOC,EAAaY,EAAbZ,SATIa,EAUH,CAAEnB,OAAMK,QAAOC,YATzCG,EAASY,YAAOF,IAUZC,KANJ,SASE,cAAC,IAAD,UACE,eAAC,IAAD,CAAYE,aAAa,MAAzB,UACE,cAAC,IAAD,kCACA,eAAC,IAAD,CAAOC,QAAO,aAAQZ,GAAtB,UACE,cAAC,IAAD,IADF,UAIA,cAAC,IAAD,CACEX,KAAK,OACLwB,KAAK,OACLC,GAAE,aAAQd,GACVe,YAAY,SAEd,cAAC,IAAD,CAAc1B,KAAK,OAAO2B,UAAWC,MAErC,eAAC,IAAD,CAAOL,QAAO,aAAQV,GAAtB,UACE,cAAC,IAAD,IADF,WAIA,cAAC,IAAD,CACEb,KAAK,QACLwB,KAAK,QACLC,GAAE,aAAQZ,GACVa,YAAY,sBAEd,cAAC,IAAD,CAAc1B,KAAK,QAAQ2B,UAAWC,MAEtC,eAAC,IAAD,CAAOL,QAAO,aAAQT,GAAtB,UACE,cAAC,IAAD,IADF,cAIA,cAAC,IAAD,CACEd,KAAK,WACLwB,KAAK,WACLC,GAAE,aAAQX,GACVY,YAAY,aAEd,cAAC,IAAD,CAAc1B,KAAK,WAAW2B,UAAWC,MAEzC,cAAC,IAAD,CAAQJ,KAAK,SAAb","file":"static/js/6.d00ddfb4.chunk.js","sourcesContent":["import * as Yup from \"yup\";\r\nimport \"yup-phone\";\r\n\r\nconst addContactValidationSchema = Yup.object().shape({\r\n  name: Yup.string()\r\n    .min(2, \"Too Short!\")\r\n    .max(50, \"Too Long!\")\r\n    .required(\"Required\"),\r\n \r\n});\r\n\r\nconst LogInValidationSchema = Yup.object().shape({\r\n  email: Yup.string().email().required(\"Required\"),\r\n  password: Yup.string()\r\n    .min(7, \"Password is too short - should be 7 chars minimum\")\r\n    .required(\"Required\"),\r\n});\r\n\r\nconst registerValidationSchema = Yup.object().shape({\r\n  name: Yup.string()\r\n    .min(2, \"Too Short!\")\r\n    .max(50, \"Too Long!\")\r\n    .required(\"Required\"),\r\n  email: Yup.string().email().required(\"Required\"),\r\n  password: Yup.string()\r\n    .min(6, \"Password is too short - should be 6 chars minimum\")\r\n    .required(\"Required\"),\r\n});\r\n\r\nexport {\r\n  addContactValidationSchema,\r\n  LogInValidationSchema,\r\n  registerValidationSchema,\r\n};","import { useDispatch } from \"react-redux\";\r\nimport { RiLockPasswordFill, RiUser3Fill } from \"react-icons/ri\";\r\nimport { FiMail } from \"react-icons/fi\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { Formik, ErrorMessage } from \"formik\";\r\nimport { registerValidationSchema } from \"utils/YupValidationSchemes\";\r\nimport { signUp } from \"redux/auth\";\r\nimport {\r\n  FormWrapper,\r\n  FormStyled,\r\n  FormTitle,\r\n  FieldStyled,\r\n  Button,\r\n  Label,\r\n  ValidationMessage,\r\n} from \"styles/common.styled\";\r\n\r\nfunction RegisterPage() {\r\n  const dispatch = useDispatch();\r\n\r\n  let nameInputId = nanoid(3);\r\n  let emailInputId = nanoid(3);\r\n  let passwordInputId = nanoid(3);\r\n\r\n  const handleAddUserOnSubmit = (newUser) => {\r\n    dispatch(signUp(newUser));\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{ name: \"\", email: \"\", password: \"\" }}\r\n      validationSchema={registerValidationSchema}\r\n      onSubmit={(values, { resetForm }) => {\r\n        const { name, email, password } = values;\r\n        handleAddUserOnSubmit({ name, email, password });\r\n        resetForm();\r\n      }}\r\n    >\r\n      <FormWrapper>\r\n        <FormStyled autoComplete=\"off\">\r\n          <FormTitle>Create your account</FormTitle>\r\n          <Label htmlFor={`id-${nameInputId}`}>\r\n            <RiUser3Fill />\r\n            Name\r\n          </Label>\r\n          <FieldStyled\r\n            name=\"name\"\r\n            type=\"text\"\r\n            id={`id-${nameInputId}`}\r\n            placeholder=\"name\"\r\n          />\r\n          <ErrorMessage name=\"name\" component={ValidationMessage} />\r\n\r\n          <Label htmlFor={`id-${emailInputId}`}>\r\n            <FiMail />\r\n            Email\r\n          </Label>\r\n          <FieldStyled\r\n            name=\"email\"\r\n            type=\"email\"\r\n            id={`id-${emailInputId}`}\r\n            placeholder=\"example@gmail.com\"\r\n          />\r\n          <ErrorMessage name=\"email\" component={ValidationMessage} />\r\n\r\n          <Label htmlFor={`id-${passwordInputId}`}>\r\n            <RiLockPasswordFill />\r\n            Password\r\n          </Label>\r\n          <FieldStyled\r\n            name=\"password\"\r\n            type=\"password\"\r\n            id={`id-${passwordInputId}`}\r\n            placeholder=\"password\"\r\n          />\r\n          <ErrorMessage name=\"password\" component={ValidationMessage} />\r\n\r\n          <Button type=\"submit\">Join</Button>\r\n        </FormStyled>\r\n      </FormWrapper>\r\n    </Formik>\r\n  );\r\n}\r\n\r\nexport default RegisterPage;"],"sourceRoot":""}