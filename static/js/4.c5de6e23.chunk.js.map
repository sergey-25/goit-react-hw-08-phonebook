{"version":3,"sources":["utils/YupValidationSchemes.js","components/Modal/Modal.styled.js","components/Modal/Modal.jsx","components/Form/ContactsForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.jsx","pages/ContactsPage/ContactsPage.jsx"],"names":["addContactValidationSchema","Yup","shape","name","min","max","required","LogInValidationSchema","email","password","registerValidationSchema","Overlay","ModalContent","Button","modalRoot","document","querySelector","Modal","closeModal","children","useEffect","window","addEventListener","handleKeyDown","removeEventListener","event","code","createPortal","onClick","target","currentTarget","type","ContactsForm","contacts","useSelector","getFiltredContactsList","dispatch","useDispatch","nameInputId","nanoid","phoneInputId","initialValues","number","validationSchema","onSubmit","values","newContact","resetForm","some","toast","error","addContact","success","autoComplete","htmlFor","id","placeholder","component","ValidationMessage","SearchWrapper","InputStyled","Filter","filter","getFilterValue","useState","toggle","setToggle","handleToggleOnClick","value","onChange","setFilterValue","List","Item","Div","ContactsList","isLoading","getLoadingStatus","fetchContacts","map","size","deleteContact","handleOnDeleteBtn","ContactsPage"],"mappings":"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","file":"static/js/4.c5de6e23.chunk.js","sourcesContent":["import * as Yup from \"yup\";\r\nimport \"yup-phone\";\r\n\r\nconst addContactValidationSchema = Yup.object().shape({\r\n  name: Yup.string()\r\n    .min(2, \"Too Short!\")\r\n    .max(50, \"Too Long!\")\r\n    .required(\"Required\"),\r\n \r\n});\r\n\r\nconst LogInValidationSchema = Yup.object().shape({\r\n  email: Yup.string().email().required(\"Required\"),\r\n  password: Yup.string()\r\n    .min(7, \"Password is too short - should be 7 chars minimum\")\r\n    .required(\"Required\"),\r\n});\r\n\r\nconst registerValidationSchema = Yup.object().shape({\r\n  name: Yup.string()\r\n    .min(2, \"Too Short!\")\r\n    .max(50, \"Too Long!\")\r\n    .required(\"Required\"),\r\n  email: Yup.string().email().required(\"Required\"),\r\n  password: Yup.string()\r\n    .min(6, \"Password is too short - should be 6 chars minimum\")\r\n    .required(\"Required\"),\r\n});\r\n\r\nexport {\r\n  addContactValidationSchema,\r\n  LogInValidationSchema,\r\n  registerValidationSchema,\r\n};","import styled from \"@emotion/styled/macro\";\r\n\r\nexport const Overlay = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: rgba(0, 0, 0, 0.6);\r\n  z-index: 100;\r\n`;\r\n\r\nexport const ModalContent = styled.div`\r\n  position: relative;\r\n  max-width: calc(100vw - 48px);\r\n  max-height: calc(100vh - 24px);\r\n`;\r\n\r\nexport const Button = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 10px;\r\n \r\n  color: #651fff;\r\n  > svg{\r\nwidth:24px;\r\nheight:24px;\r\n  };\r\n  \r\n  \r\n  cursor: pointer;\r\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\r\n  &:hover,\r\n  &:focus {\r\n    color: red;\r\n   \r\n  }\r\n`;","import PropTypes from \"prop-types\";\r\nimport { useEffect } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport { CgClose } from \"react-icons/cg\";\r\nimport { Overlay, ModalContent, Button } from \"./Modal.styled\";\r\n\r\nconst modalRoot = document.querySelector(\"#modal-root\");\r\n\r\nfunction Modal({ closeModal, children }) {\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", handleKeyDown);\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", handleKeyDown);\r\n    };\r\n  });\r\n\r\n  const handleKeyDown = (event) => {\r\n    if (event.code === \"Escape\") {\r\n      closeModal();\r\n    }\r\n  };\r\n\r\n  const handleOnOverlayClick = (event) => {\r\n    if (event.target === event.currentTarget) {\r\n      closeModal();\r\n    }\r\n  };\r\n\r\n  return createPortal(\r\n    <Overlay onClick={handleOnOverlayClick}>\r\n      <ModalContent>\r\n        <Button type=\"button\" onClick={() => closeModal()}>\r\n          <CgClose />\r\n        </Button>\r\n        {children}\r\n      </ModalContent>\r\n    </Overlay>,\r\n    modalRoot\r\n  );\r\n}\r\n\r\nModal.propTypes = {\r\n  closeModal: PropTypes.func.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Modal;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { Formik, ErrorMessage } from \"formik\";\r\nimport { addContactValidationSchema } from \"utils/YupValidationSchemes\";\r\nimport { addContact, getFiltredContactsList } from \"redux/contacts\";\r\nimport {\r\n  FormStyled,\r\n  FieldStyled,\r\n  Button,\r\n  Label,\r\n  ValidationMessage,\r\n} from \"styles/common.styled\";\r\nimport toast from \"react-hot-toast\";\r\n\r\nfunction ContactsForm() {\r\n  const contacts = useSelector(getFiltredContactsList);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleAddContactOnSubmit = (newContact) => {\r\n    if (contacts.some(({ name }) => name === newContact.name)) {\r\n      toast.error(`Contact ${newContact.name} already exists`);\r\n      return;\r\n    }\r\n\r\n    dispatch(addContact(newContact));\r\n    toast.success(`Contact ${newContact.name} created`);\r\n  };\r\n\r\n  let nameInputId = nanoid(3);\r\n  let phoneInputId = nanoid(3);\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{ name: \"\", number: \"\" }}\r\n      validationSchema={addContactValidationSchema}\r\n      onSubmit={(values, { resetForm }) => {\r\n        const { name, number } = values;\r\n        handleAddContactOnSubmit({ name, number });\r\n        resetForm();\r\n      }}\r\n    >\r\n      <FormStyled autoComplete=\"off\">\r\n        <Label htmlFor={`id-${nameInputId}`}>Name</Label>\r\n        <FieldStyled\r\n          id={`id-${nameInputId}`}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          placeholder=\"Name\"\r\n        />\r\n        <ErrorMessage name=\"name\" component={ValidationMessage} />\r\n\r\n        <Label htmlFor={`id-${phoneInputId}`}>Number</Label>\r\n        <FieldStyled\r\n          id={`id-${phoneInputId}`}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          placeholder=\"+38 (XXX) XXX-XX-XX\"\r\n        />\r\n        <ErrorMessage name=\"number\" component={ValidationMessage} />\r\n\r\n        <Button type=\"submit\">Add contact</Button>\r\n      </FormStyled>\r\n    </Formik>\r\n  );\r\n}\r\n\r\nexport default ContactsForm;","import styled from \"@emotion/styled/macro\";\r\n\r\nexport const SearchWrapper = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  max-width: 600px;\r\n  margin-top: 30px;\r\n  margin-bottom: 30px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`;\r\n\r\nexport const Button = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 10px;\r\n  margin-right: 20px;\r\n  background-color: ;\r\n color:#651fff;\r\n  \r\n  border-radius: 50%;\r\n  cursor: pointer;\r\n  > svg{\r\n      width: 20px;\r\n      height:20px; };\r\n  &:hover,\r\n  &:focus {\r\n    \r\n  }\r\n`;\r\n\r\nexport const InputStyled = styled.input`\r\n  width: 100%;\r\n  color: black;\r\n  \r\n  border: 1px solid black;\r\n  border-radius: 5px;\r\n  padding-left: 10px;\r\n  font-size: 14px;\r\n  &:hover,\r\n  &:focus {\r\n   \r\n  }\r\n`;","import PropTypes from \"prop-types\";\r\nimport { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { RiUserAddFill } from \"react-icons/ri\";\r\nimport { getFilterValue } from \"redux/contacts\";\r\nimport { setFilterValue } from \"redux/contacts/contacts-slices\";\r\nimport Modal from \"components/Modal/Modal\";\r\nimport ContactsForm from \"../Form/ContactsForm\";\r\nimport {\r\n  InputStyled,\r\n  SearchWrapper,\r\n  Button,\r\n} from \"components/Filter/Filter.styled\";\r\n\r\nfunction Filter() {\r\n  const filter = useSelector(getFilterValue);\r\n  const dispatch = useDispatch();\r\n  const [toggle, setToggle] = useState(false);\r\n\r\n  const handleToggleOnClick = () => setToggle(!toggle);\r\n\r\n  return (\r\n    <>\r\n      <SearchWrapper>\r\n        <Button onClick={   handleToggleOnClick}>\r\n          <RiUserAddFill />\r\n        </Button>\r\n        <InputStyled\r\n          id={`id-${nanoid(3)}`}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={filter}\r\n          onChange={(event) => dispatch(setFilterValue(event.target.value))}\r\n          placeholder=\"Search\"\r\n          autoComplete=\"off\"\r\n        />\r\n      </SearchWrapper>\r\n      {toggle && (\r\n        <Modal closeModal={handleToggleOnClick}>\r\n          <ContactsForm/>\r\n        </Modal>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string,\r\n};\r\n\r\nexport default Filter;","import styled from \"@emotion/styled/macro\";\r\n\r\nexport const List = styled.ul`\r\n  width: 100%;\r\n  max-width: 600px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  font-size: 14px;\r\n  width: 100%;\r\n  padding: 10px 12px;\r\n \r\n  border: 1px solid black;\r\n  border-radius: 5px;\r\n \r\n  &:not(:last-child) {\r\n    margin-bottom: 10px;\r\n  }\r\n  &:hover,\r\n  &:focus {\r\n   \r\n  }\r\n  @keyframes scaleIn {\r\n    from {\r\n      transform: scale(0);\r\n      opacity: 0;\r\n    }\r\n    to {\r\n      opacity: 1;\r\n      transform: scale(1);\r\n    }\r\n  }\r\n  @media screen and (min-width: 425px) {\r\n    font-size: 16px;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-width: 60px;\r\n  padding: 10px;\r\n  margin-left: 10px;\r\n  margin-right: 10px;\r\n  font-size: 12px;\r\n  font-weight: 700;\r\n  color: whitesmoke;\r\n  background-color: #651fff;\r\n  border: 1px solid transparent;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  text-transform: uppercase;\r\n\r\n  &:hover,\r\n  &:focus {\r\n    background-color: red;\r\n  }\r\n  @media screen and (min-width: 425px) {\r\n    min-width: 80px;\r\n    padding: 4px 10px;\r\n  }\r\n  @media screen and (min-width: 768px) {\r\n    min-width: 150px;\r\n    padding: 8px 12px;\r\n  }\r\n`;\r\n\r\nexport const Div = styled.div`\r\n  color: black  ;\r\n  & > svg {\r\n    color: #651fff;\r\n    width: 20px;\r\n    margin-right: 3px;\r\n  }\r\n  &:not(:last-child) {\r\n    text-transform: capitalize;\r\n    color: black;\r\n    margin-bottom: 5px;\r\n  }\r\n  @media screen and (min-width: 725px) {\r\n    & > svg {\r\n      width: 25px;\r\n      margin-right: 0;\r\n    }\r\n  }\r\n  @media screen and (min-width: 768px) {\r\n    & > svg {\r\n      width: 35px;\r\n    }\r\n  }\r\n`;","import PropTypes from \"prop-types\";\r\nimport { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { FaUser, FaPhoneAlt } from \"react-icons/fa\";\r\nimport {\r\n  fetchContacts,\r\n  deleteContact,\r\n  getFiltredContactsList,\r\n  getLoadingStatus,\r\n} from \"redux/contacts\";\r\nimport toast from \"react-hot-toast\";\r\nimport {\r\n  List,\r\n  Item,\r\n  Div,\r\n  Button,\r\n} from \"components/ContactsList/ContactsList.styled\";\r\n\r\nfunction ContactsList() {\r\n  const isLoading = useSelector(getLoadingStatus);\r\n  const contacts = useSelector(getFiltredContactsList);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  const handleOnDeleteBtn = (id, name) => {\r\n    dispatch(deleteContact(id));\r\n    toast.success(`Contact ${name} deleted`);\r\n  };\r\n\r\n  return (\r\n    <List>\r\n      {contacts &&\r\n        contacts.map(({ id, name, number }) => {\r\n          return (\r\n            <Item key={id}>\r\n              <div>\r\n                <Div>\r\n                  <FaUser size={16} />\r\n                  <span>\r\n                    <b>{name}</b>\r\n                  </span>\r\n                </Div>\r\n                <Div>\r\n                  <FaPhoneAlt size={16} />\r\n                  <span>{number}</span>\r\n                </Div>\r\n              </div>\r\n              <Button type=\"button\" onClick={() => handleOnDeleteBtn(id, name)}>\r\n                Delete\r\n              </Button>\r\n            </Item>\r\n          );\r\n        })}\r\n      {isLoading && <div>Loading...</div>}\r\n    </List>\r\n  );\r\n}\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)),\r\n};\r\n\r\nexport default ContactsList;","import Filter from \"components/Filter/Filter\";\r\nimport ContactsList from \"components/ContactsList/ContactsList\";\r\n\r\nfunction ContactsPage() {\r\n  return (\r\n    <>\r\n      <Filter />\r\n      <ContactsList />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ContactsPage;"],"sourceRoot":""}